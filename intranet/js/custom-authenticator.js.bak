/**
 * iBridge Custom Authentication System
 * Provides authentication without Microsoft 365 dependency
 * Uses IBD[Last Name Initials][Unique ID] format for employee codes
 */

class CustomAuthenticator {
  constructor() {
    this.settings = null;
    this.accessControl = null;
    this.employeeCodes = null;
    this.currentUser = null;
    this.isAuthenticated = false;
    this.initComplete = false;
  }
  
  /**
   * Initialize the authenticator by loading required configuration
   */
  async initialize() {
    try {
      // Load necessary configuration files
      const settingsResponse = await fetch('/intranet/data/settings.json');
      this.settings = await settingsResponse.json();
      
      const accessResponse = await fetch('/intranet/data/access-control.json');
      this.accessControl = await accessResponse.json();
      
      const codesResponse = await fetch('/intranet/data/employee-codes.json');
      this.employeeCodes = await codesResponse.json();
      
      // Check session storage for existing authentication
      this.checkExistingAuth();
      
      this.initComplete = true;
      console.log('Custom authenticator initialized successfully');
      
      return true;
    } catch (error) {
      console.error('Failed to initialize authenticator:', error);
      return false;
    }
  }
  
  /**
   * Check if user is already authenticated
   */
  checkExistingAuth() {
    const storedUser = sessionStorage.getItem('portalUser');
    const storedAuthMode = sessionStorage.getItem('authMode');
    
    if (storedUser && storedAuthMode) {
      try {
        this.currentUser = JSON.parse(storedUser);
        this.authMode = storedAuthMode;
        this.isAuthenticated = true;
        console.log('Existing authentication found');
        
        return true;
      } catch (error) {
        console.error('Error parsing stored authentication:', error);
        this.clearAuthentication();
      }
    }
    
    return false;
  }
  
  /**
   * Authenticate using employee code
   * @param {string} employeeCode - The employee code to authenticate
   */
  async authenticateWithEmployeeCode(employeeCode) {
    if (!this.initComplete) {
      await this.initialize();
    }
    
    // Check if employee code login is enabled
    if (!this.settings.employeeCodeLogin) {
      console.error('Employee code login is disabled');
      return {
        success: false,
        error: 'Employee code login is disabled'
      };
    }
    
    // Validate employee code format (IBD format)
    if (!this.validateEmployeeCodeFormat(employeeCode)) {
      console.error('Invalid employee code format');
      return {
        success: false,
        error: 'Invalid employee code format. Please use the correct format.'
      };
    }
    
    // Check if portal is in exclusive mode and if this code is allowed
    if (this.accessControl.restrictedAccess && 
        !this.accessControl.allowedEmployeeCodes.includes(employeeCode)) {
      console.error('Access restricted. Employee code not authorized.');
      return {
        success: false,
        error: 'Access restricted. Employee code not authorized.'
      };
    }
    
    // Find user by employee code
    const userMapping = this.employeeCodes.mappings.find(m => 
      m.employeeCode === employeeCode
    );
    
    if (!userMapping) {
      console.error('Invalid employee code');
      return {
        success: false,
        error: 'Invalid employee code'
      };
    }
    
    // Set current user and auth mode using employee code data
    this.currentUser = {
      displayName: `${userMapping.firstName} ${userMapping.lastName}`,
      userPrincipalName: userMapping.userPrincipalName,
      mail: userMapping.userPrincipalName,
      employeeCode: employeeCode,
      department: userMapping.department,
      position: userMapping.position,
      permissions: userMapping.permissions || {
        isAdmin: false,
        isEditor: false,
        canViewAdminPanel: false,
        canManageUsers: false
      }
    };
    
    this.authMode = 'employee-code';
    this.isAuthenticated = true;
    
    // Store authentication in session storage
    sessionStorage.setItem('portalUser', JSON.stringify(this.currentUser));
    sessionStorage.setItem('authMode', this.authMode);
    
    // For compatibility with old system
    sessionStorage.setItem('user', JSON.stringify({
      name: this.currentUser.displayName,
      username: this.currentUser.userPrincipalName,
      email: this.currentUser.mail,
      isAdmin: this.currentUser.permissions.isAdmin,
      lastLogin: new Date().toISOString(),
      authMethod: 'employee-code'
    }));
    
    // Set authentication cookies for compatibility
    this._setAuthCookies();
    
    console.log('Authentication successful with employee code');
    
    return {
      success: true,
      user: this.currentUser
    };
  }
  
  /**
   * Authenticate using username and password
   * @param {string} username - Username (email or employee code)
   * @param {string} password - Password
   */
  async authenticateWithCredentials(username, password) {
    if (!this.initComplete) {
      await this.initialize();
    }
    
    // First try employee code login if it matches the pattern
    if (this.validateEmployeeCodeFormat(username)) {
      return this.authenticateWithEmployeeCode(username);
    }
    
    // Try to find user by email
    const userMapping = this.employeeCodes.mappings.find(m => 
      m.userPrincipalName.toLowerCase() === username.toLowerCase()
    );
    
    if (!userMapping) {
      console.error('User not found');
      return {
        success: false,
        error: 'Invalid username or password'
      };
    }
    
    // In a real system, you would verify the password here
    // For this prototype, we're using a simple check for "iBridge2025"
    // This should be replaced with proper password hashing and verification
    if (password !== "iBridge2025" && password !== "ibridge123") {
      console.error('Invalid password');
      return {
        success: false,
        error: 'Invalid username or password'
      };
    }
    
    // Check if portal is in exclusive mode and if this user is allowed
    if (this.accessControl.restrictedAccess && 
        !this.accessControl.allowedUsers.includes(userMapping.userPrincipalName)) {
      console.error('Access restricted. User not authorized.');
      return {
        success: false,
        error: 'Access restricted. User not authorized.'
      };
    }
    
    // Set current user and auth mode
    this.currentUser = {
      displayName: `${userMapping.firstName} ${userMapping.lastName}`,
      userPrincipalName: userMapping.userPrincipalName,
      mail: userMapping.userPrincipalName,
      employeeCode: userMapping.employeeCode,
      department: userMapping.department,
      position: userMapping.position,
      permissions: userMapping.permissions || {
        isAdmin: false,
        isEditor: false,
        canViewAdminPanel: false,
        canManageUsers: false
      }
    };
    
    this.authMode = 'credentials';
    this.isAuthenticated = true;
    
    // Store authentication in session storage
    sessionStorage.setItem('portalUser', JSON.stringify(this.currentUser));
    sessionStorage.setItem('authMode', this.authMode);
    
    // For compatibility with old system
    sessionStorage.setItem('user', JSON.stringify({
      name: this.currentUser.displayName,
      username: this.currentUser.userPrincipalName,
      email: this.currentUser.mail,
      isAdmin: this.currentUser.permissions.isAdmin,
      lastLogin: new Date().toISOString(),
      authMethod: 'credentials'
    }));
    
    // Set authentication cookies for compatibility
    this._setAuthCookies();
    
    console.log('Authentication successful with credentials');
    
    return {
      success: true,
      user: this.currentUser
    };
  }
  
  /**
   * Set authentication cookies
   * This helps ensure compatibility with the existing authentication check system
   * @private
   */
  _setAuthCookies() {
    // Set cookies with path for the entire intranet
    document.cookie = `user_authenticated=true; path=/intranet/; secure; samesite=strict`;
    document.cookie = `intranet_session=active; path=/intranet/; secure; samesite=strict`;
  }
  
  /**
   * Clear authentication cookies
   * @private
   */
  _clearAuthCookies() {
    // Clear cookies by setting expiration to the past
    document.cookie = `user_authenticated=; path=/intranet/; expires=Thu, 01 Jan 1970 00:00:00 GMT; secure; samesite=strict`;
    document.cookie = `intranet_session=; path=/intranet/; expires=Thu, 01 Jan 1970 00:00:00 GMT; secure; samesite=strict`;
  }
  
  /**
   * Clear authentication data (used for invalid sessions)
   */
  clearAuthentication() {
    this.logout();
  }
  
  /**
   * Log out the current user
   */
  logout() {
    this.currentUser = null;
    this.isAuthenticated = false;
    this.authMode = null;
    
    // Clear session storage
    sessionStorage.removeItem('portalUser');
    sessionStorage.removeItem('authMode');
    sessionStorage.removeItem('user'); // Clear old format too
    
    // Clear authentication cookies
    this._clearAuthCookies();
    
    return true;
  }
  
  /**
   * Validate employee code format (IBD[Last Name Initials][Unique ID])
   * @param {string} code - The employee code to validate
   */
  validateEmployeeCodeFormat(code) {
    // Basic format validation
    const regex = /^IBD[A-Z]{1,3}\d{2,4}$/;
    return regex.test(code);
  }
  
  /**
   * Generate a new employee code based on name
   * @param {string} firstName - User's first name
   * @param {string} lastName - User's last name
   */
  generateEmployeeCode(firstName, lastName) {
    // Get last name initials (up to 3 characters)
    const lastNameInitials = lastName.substring(0, Math.min(lastName.length, 3)).toUpperCase();
    
    // Find highest existing ID with same initials
    let highestId = 0;
    
    const codePrefix = `IBD${lastNameInitials}`;
    this.employeeCodes.mappings.forEach(mapping => {
      if (mapping.employeeCode.startsWith(codePrefix)) {
        const idPart = mapping.employeeCode.substring(codePrefix.length);
        const idNumber = parseInt(idPart, 10);
        if (!isNaN(idNumber) && idNumber > highestId) {
          highestId = idNumber;
        }
      }
    });
    
    // Generate new ID (increment highest existing ID)
    const newId = highestId + 1;
    
    // Format with leading zeros based on number of digits
    let idPart = newId.toString();
    if (newId < 10) {
      idPart = `0${newId}`;
    } else if (newId < 100) {
      idPart = `${newId}`;
    } else if (newId < 1000) {
      idPart = `${newId}`;
    }
    
    return `${codePrefix}${idPart}`;
  }
  
  /**
   * Check if current user has a specific permission
   * @param {string} permission - The permission to check
   */
  hasPermission(permission) {
    if (!this.isAuthenticated || !this.currentUser || !this.currentUser.permissions) {
      return false;
    }
    
    return !!this.currentUser.permissions[permission];
  }
  
  /**
   * Check if current user is an admin
   */
  isAdmin() {
    return this.hasPermission('isAdmin');
  }
}

// Initialize authenticator and expose to window
window.customAuth = new CustomAuthenticator();
document.addEventListener('DOMContentLoaded', () => {
  window.customAuth.initialize();
});
